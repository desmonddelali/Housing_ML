# -*- coding: utf-8 -*-
"""Regress.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hRmA4YLLXT6MkCnusXG_r4guOsZNbp5A
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

from sklearn.datasets import fetch_california_housing

housing=fetch_california_housing()

housing.keys()

print(housing.DESCR)

print(housing.data)

print(housing.target)

dataset = pd.DataFrame(housing.data,columns=housing.feature_names)

dataset.head()

dataset['Price'] = housing.target

dataset.head()

dataset.isnull().sum()

dataset.info()

dataset.describe()

dataset.corr()

plt.scatter(dataset['MedInc'],dataset['Price'])
plt.xlabel('Median Income')
plt.ylabel('Price')

plt.scatter(dataset['AveRooms'],dataset['Price'])
plt.xlabel('Average Rooms')
plt.ylabel('Price')

plt.scatter(dataset['HouseAge'],dataset['Price'])
plt.xlabel('House Age')
plt.ylabel('Price')

plt.scatter(dataset['Latitude'],dataset['Price'])
plt.xlabel('Latitude')
plt.ylabel('Price')

sns.pairplot(dataset)

sns.regplot(x='MedInc',y='Price',data=dataset)

sns.regplot(x='AveRooms',y='Price',data=dataset)

sns.regplot(x='Latitude',y='Price',data=dataset)

X = dataset.iloc[:,:-1]
y = dataset.iloc[:,-1]

X

y

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.2,random_state=42)

X_train

X_test

y_train

from sklearn.preprocessing import StandardScaler
scaler= StandardScaler()

X_train =scaler.fit_transform(X_train)
X_test =scaler.transform(X_test)

X_train

X_test

from sklearn.linear_model import LinearRegression
regression = LinearRegression()

regression.fit(X_train,y_train)

print(regression.coef_)

print(regression.intercept_)

regression.get_params()

reg_pred =regression.predict(X_test)

reg_pred

plt.scatter(y_test,reg_pred)

residuals = y_test-reg_pred

sns.displot(residuals,kind ='kde')

plt.scatter(reg_pred,residuals)

from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error

print(mean_absolute_error(y_test,reg_pred))
print(mean_squared_error(y_test,reg_pred))
print(np.sqrt(mean_squared_error(y_test,reg_pred)))

from sklearn.metrics import r2_score
score = r2_score(y_test,reg_pred)
print(score)

print(1-(1-score)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1))

import pickle

pickle.dump(scaler,open('scaler.pkl','wb'))

pickle.dump(regression,open('Reg_model.pkl','wb'))